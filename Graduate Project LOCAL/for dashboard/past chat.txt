Awesome! Here's your full **Business Hub Project Summary** — clean, organized, and ready to copy-paste into a `.txt`, `.docx`, or `.md` file for safekeeping.

---

# 📘 Business Hub – Project Architecture & Database Summary  
*Last updated: 2025-04-12*

---

## 🎯 Project Purpose
A centralized platform built for students at the **University of Jordan Business School** to:
- Access departmental books & courses
- Engage in a student-driven book exchange system
- View categorized academic staff with contact & office info
- Send/receive book requests
- Chat directly between students
- Enable admin-level content management

---

## 🧩 SYSTEM MODULES

### 1. Department Pages
Each department page displays:
- 📚 Books: `book_name`, `book_material`
- 📘 Courses: `course_name`, `course_link`, `course_description`

### 2. Academic Staff Page
- 7 categorized staff tables by department
- Each row includes: image, name (hyperlinked to LinkedIn), email, office location, department name

### 3. Book Exchange Page
- Dynamic card layout of all books
- Each card has:
  - **Give** button → adds user as a book offer
  - **Take** button → shows list of users offering the book
  - **Request** button beside each offer → sends notification
  - **Accept/Reject** → controls book flow and opens chat if accepted

---

## 🧾 DATABASE TABLES (with Key Fields)

### 🔐 `users`
- `id` (PK)
- `name`, `email`, `student_id`, `password` (hashed)
- `role`: ENUM ('user', 'admin', 'super_admin')

---

### 🏛 `departments`
- `id` (PK)
- `department_name`

---

### 📚 `books`
- `id` (PK)
- `department_id` (FK → departments.id)
- `book_name`, `book_material`

---

### 📘 `courses`
- `id` (PK)
- `department_id` (FK)
- `course_name`, `course_link`, `course_description`

---

### 👨‍🏫 `academic_staff`
- `id` (PK)
- `name`, `email`, `linkedin`, `image`, `office_location`
- `department_id` (FK)

---

## 📦 BOOK EXCHANGE MODULE TABLES

### 📗 `book_exchange`
- `id` (PK)
- `book_name`, `major`

---

### 🤝 `book_offers`
- `id` (PK)
- `book_id` (FK → book_exchange.id)
- `user_id` (FK → users.id)
- `timestamp`

---

### 📩 `book_requests`
- `id` (PK)
- `offer_id` (FK → book_offers.id)
- `requester_id` (FK → users.id)
- `status`: ENUM ('pending', 'accepted', 'rejected')
- `timestamp`

---

### 🔔 `notifications`
- `id` (PK)
- `user_id` (recipient FK → users.id)
- `receiver_id` (optional secondary user)
- `action_id` (FK → book_requests.id)
- `type`: e.g., 'book_request'
- `message`
- `is_read`, `created_at`

---

### 💬 `chat_messages`
- `id` (PK)
- `sender_id` (FK → users.id)
- `receiver_id` (FK → users.id)
- `message`, `timestamp`

---

## 📊 RELATIONSHIPS OVERVIEW

- **users** link to:
  - `book_offers.user_id`
  - `book_requests.requester_id`
  - `notifications.user_id`
  - `chat_messages.sender_id` / `receiver_id`

- **departments** link to:
  - `books.department_id`
  - `courses.department_id`
  - `academic_staff.department_id`

- **book_exchange** → parent of:
  - `book_offers.book_id` → parent of:
    - `book_requests.offer_id`

---

## 🛠 Admin Dashboard Sections

- 🔹 Manage Books (CRUD per department)
- 🔹 Manage Courses (CRUD per department)
- 🔹 Manage Academic Staff (image + info + filtering)
- 🔹 Monitor Book Exchange system (requests, notifications)
- 🔹 View Users & Roles (optional)

---

## 🧠 Tips
- Don’t worry about deep normalization — you're doing great with clean structure
- Foreign keys don’t need strict MySQL constraints unless desired
- Use PHP sessions to link logged-in user ID (`$_SESSION['user_id']`)
- Book Exchange logic is doable fully on `localhost` using XAMPP + PHP + MySQL

---
Here’s a **complete, detailed summary** of your entire conversation — you can **copy and reuse** it easily in another thread:

---

### ✅ Project Context:
You’re working on a **dashboard for your “Business Hub” website**, specifically the **Admin section**, where super admins and admins can:

- Manage users (`manage_users.php`)
- Manage courses (`manage_courses.php`)
- Add, edit, delete entries
- Filter and display data clearly
- Use a dark-themed UI

---

### 🔐 Login & Session Management:
- You implemented **session restrictions** that only allow `admin` and `super_admin` to access the pages.
- You added **cache control headers** and JavaScript to prevent back-button navigation after logout.
- Logout is handled with a session destroy and redirect script (`adminlogout.php`).

---

### 👥 `manage_users.php`:
- Displays all users in a table.
- Allows changing user role via dropdown and a green “Update” button.
- Allows deleting a user via a red “Delete” button.
- A form at the top allows you to **manually add users** (name, email, password, role).
- You chose to **disable password hashing** for now when adding users.
- You styled the form with a dark purple shade `#5E2950`, and applied soft alternating table row colors.
- Bootstrap 5 is used for layout.

---

### 📚 `manage_courses.php`:
- Allows adding a new course with:
  - Course name
  - Course link
  - Course description
  - Dropdown list to select a **major** (7 options: MIS, Accounting, Finance, etc.)
- The `courses` table already had a `department_id` column (numeric). Instead of storing department names as strings, you now use this ID to:
  - **Insert into the database**
  - **Join with the `departments` table** to get the department name
- You now display the **department name** instead of the number in the UI.

---

### 🗂️ Dynamic Dropdown (Majors):
- You requested that the dropdown for majors (departments) use the **actual `departments` table**.
- We fetched departments using:

```php
$departments = mysqli_query($conn, "SELECT * FROM departments");
```

And displayed them using:

```php
<select name="department_id">
  <?php while ($dept = mysqli_fetch_assoc($departments)): ?>
    <option value="<?= $dept['id'] ?>"><?= $dept['department_name'] ?></option>
  <?php endwhile; ?>
</select>
```

---

### 🔍 Course Filtering by Major:
- You explained that each course belongs to one of 7 **department-specific course tables/pages**.
- You want to **filter courses by major** in the admin dashboard without breaking relational logic or foreign key structure.
- We recommended using a **`department_id` foreign key** in the `courses` table and filtering via SQL:

```php
SELECT * FROM courses WHERE department_id = ?;
```

- This allows filtering without creating separate tables per major and keeps the **ERD clean and normalized**.

---

### ✅ Database Structure Notes:
- `courses` table has: `id`, `course_name`, `course_link`, `course_description`, `department_id`
- `departments` table has: `id`, `department_name`
- `courses.department_id` is a **foreign key** referencing `departments.id`

---

### ✅ Final Features Implemented:
- 🔐 Secure role-based access
- 📤 Manual user/course addition
- 🗂️ Filtering and department-based linking
- 🎨 Theming (dark background, purple form, soft row colors)
- ⚙️ Dynamic dropdowns for majors
- 📁 Bootstrap 5 UI
- 🔄 Real-time reload on logout/back button

---

🛠️ PHASE 1: ADMIN LOGIN SYSTEM & SESSION SECURITY
✅ 1. Admin Login System
✔️ Backend (admin_login.php):
Used session_start(); to manage login sessions

Checked user credentials from the database

Verified role is either 'admin' or 'super_admin'

If valid, stored login info in session and redirected to dashboard

If invalid, stored an error in $_SESSION['login_error'] and redirected back to login page

✔️ Frontend (admin_login_page.php):
Created a styled login form with:

Dark background and blurred image

White login card

Email + password input

Forgot password link

Inline red error message display

🔥 Key Features:
Error messages shown inside the login form, not on a separate page

Prevented back-button access using headers

Role-based access enforcement

Explained why session_start(); is required even before login (to read error messages)

✅ 2. Security & Best Practices
Area	Your Status
Prepared SQL Statements	✅ Using bind_param()
Role Validation	✅ Admin / Super Admin only
Session Checks	✅ Applied on all pages
Cache & Back Button Protection	✅ Set headers properly
Password Hashing	❌ Not applied yet (optional next step)
CSRF Token	❌ Discussed, but skipped for now
HTTPS	❌ Not required on localhost
📌 PHASE 2: USE CASE ANALYSIS & DIAGRAM
✅ 3. Use Case Clarification
You asked:

“What should be a use case and what shouldn’t? And should we mention roles inside use case titles?”

✅ We clarified:

Use cases = actions the system performs

Don’t mix them with roles

Use cases should be generic and not depend on who performs them